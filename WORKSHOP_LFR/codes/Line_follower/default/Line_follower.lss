
Line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000071  00000000  00000000  000000fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003d  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c4  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000086  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	19 c0       	rjmp	.+50     	; 0x68 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<util/delay.h>


void main()
{
DDRB=0B00001111;
  38:	8f e0       	ldi	r24, 0x0F	; 15
  3a:	87 bb       	out	0x17, r24	; 23
DDRC=0B00000000;
  3c:	14 ba       	out	0x14, r1	; 20
PORTC=0b00000000;
  3e:	15 ba       	out	0x15, r1	; 21

if(PINC ==0b00001001)  //two sensors high (LS=1,RS=1)
PORTB=0b00001010; //forward

else if(PINC ==0b00000001) //right sensor on line(LS=1,RS=0)
PORTB=0b00000010; //right turn
  40:	22 e0       	ldi	r18, 0x02	; 2

while(1)
{

if(PINC ==0b00001001)  //two sensors high (LS=1,RS=1)
PORTB=0b00001010; //forward
  42:	9a e0       	ldi	r25, 0x0A	; 10


while(1)
{

if(PINC ==0b00001001)  //two sensors high (LS=1,RS=1)
  44:	83 b3       	in	r24, 0x13	; 19
  46:	89 30       	cpi	r24, 0x09	; 9
  48:	11 f4       	brne	.+4      	; 0x4e <__SREG__+0xf>
PORTB=0b00001010; //forward
  4a:	98 bb       	out	0x18, r25	; 24
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__SREG__+0x25>

else if(PINC ==0b00000001) //right sensor on line(LS=1,RS=0)
  4e:	83 b3       	in	r24, 0x13	; 19
  50:	81 30       	cpi	r24, 0x01	; 1
  52:	11 f4       	brne	.+4      	; 0x58 <__SREG__+0x19>
PORTB=0b00000010; //right turn
  54:	28 bb       	out	0x18, r18	; 24
  56:	06 c0       	rjmp	.+12     	; 0x64 <__SREG__+0x25>

else if(PINC ==0b00001000) //left  sensor on line (LS=0,RS=1)
  58:	83 b3       	in	r24, 0x13	; 19
  5a:	88 30       	cpi	r24, 0x08	; 8
  5c:	11 f4       	brne	.+4      	; 0x62 <__SREG__+0x23>
PORTB=0b00001000; //left turn
  5e:	88 bb       	out	0x18, r24	; 24
  60:	01 c0       	rjmp	.+2      	; 0x64 <__SREG__+0x25>

else
PORTB=0b00000000;
  62:	18 ba       	out	0x18, r1	; 24


PORTC=0b00000000; //sensor PORT to zero
  64:	15 ba       	out	0x15, r1	; 21
  66:	ee cf       	rjmp	.-36     	; 0x44 <__SREG__+0x5>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
