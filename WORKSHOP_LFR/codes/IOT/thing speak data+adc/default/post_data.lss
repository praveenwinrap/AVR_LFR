
post_data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800108  00800108  000003d2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a3  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000622  00000000  00000000  00000495  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020c  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049d  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000148  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 30       	cpi	r26, 0x08	; 8
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a8 e0       	ldi	r26, 0x08	; 8
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 30       	cpi	r26, 0x0C	; 12
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	67 d0       	rcall	.+206    	; 0x128 <main>
  5a:	1b c1       	rjmp	.+566    	; 0x292 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_init>:
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0;
  5e:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
  60:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 bd       	out	0x20, r24	; 32
	

	//uart_delay(100);
}
  6e:	08 95       	ret

00000070 <uart_char>:

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  70:	5d 9b       	sbis	0x0b, 5	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <uart_char>
	UDR=t;
  74:	8c b9       	out	0x0c, r24	; 12
}
  76:	08 95       	ret

00000078 <uart_num>:
	uart_delay(100);
}

 
void uart_num(unsigned char num)
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	48 2f       	mov	r20, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  7e:	64 e6       	ldi	r22, 0x64	; 100
  80:	d5 d0       	rcall	.+426    	; 0x22c <__udivmodqi4>
  82:	e8 2f       	mov	r30, r24
	T=(num - (H*100))/10;
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	8c e9       	ldi	r24, 0x9C	; 156
  8a:	9f ef       	ldi	r25, 0xFF	; 255
  8c:	28 9f       	mul	r18, r24
  8e:	e0 01       	movw	r28, r0
  90:	29 9f       	mul	r18, r25
  92:	d0 0d       	add	r29, r0
  94:	38 9f       	mul	r19, r24
  96:	d0 0d       	add	r29, r0
  98:	11 24       	eor	r1, r1
  9a:	ce 01       	movw	r24, r28
  9c:	84 0f       	add	r24, r20
  9e:	91 1d       	adc	r25, r1
  a0:	6a e0       	ldi	r22, 0x0A	; 10
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	cf d0       	rcall	.+414    	; 0x244 <__divmodhi4>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <uart_num+0x2e>
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
  aa:	e0 5d       	subi	r30, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  ac:	ec b9       	out	0x0c, r30	; 12
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_num+0x36>
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
  b2:	60 5d       	subi	r22, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  b4:	6c b9       	out	0x0c, r22	; 12
  b6:	60 53       	subi	r22, 0x30	; 48
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <uart_num+0x40>
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
  bc:	40 5d       	subi	r20, 0xD0	; 208
  be:	4c 0f       	add	r20, r28
  c0:	86 ef       	ldi	r24, 0xF6	; 246
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	68 9f       	mul	r22, r24
  c6:	80 2d       	mov	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	84 0f       	add	r24, r20
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  cc:	8c b9       	out	0x0c, r24	; 12
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <uart_read>:
 
unsigned char uart_read()
{
		while((UCSRA & 0b10000000)==0);
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <uart_read>
	return UDR;
  d8:	8c b1       	in	r24, 0x0c	; 12
}
  da:	08 95       	ret

000000dc <uart_delay>:
 
void uart_delay(unsigned int delaytime)
{
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	20 e9       	ldi	r18, 0x90	; 144
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <uart_delay+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <uart_delay+0x8>
	_delay_ms(100);
}
  ee:	08 95       	ret

000000f0 <uart_string>:
	UDR=t;
}

 
void uart_string(char a[])
{
  f0:	fc 01       	movw	r30, r24
  f2:	04 c0       	rjmp	.+8      	; 0xfc <uart_string+0xc>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  f4:	5d 9b       	sbis	0x0b, 5	; 11
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <uart_string+0x4>
	UDR=t;
  f8:	8c b9       	out	0x0c, r24	; 12
  fa:	31 96       	adiw	r30, 0x01	; 1
 
void uart_string(char a[])
{
	
	int i;
	for(i=0;a[i]!='\0';i++)
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	c9 f7       	brne	.-14     	; 0xf4 <uart_string+0x4>
	uart_char(a[i]);
	uart_delay(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ea df       	rcall	.-44     	; 0xdc <uart_delay>
}
 108:	08 95       	ret

0000010a <adc_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 10a:	86 e8       	ldi	r24, 0x86	; 134
 10c:	86 b9       	out	0x06, r24	; 6
  		
 }
 10e:	08 95       	ret

00000110 <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 110:	90 e6       	ldi	r25, 0x60	; 96
 112:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 114:	97 b1       	in	r25, 0x07	; 7
 116:	98 2b       	or	r25, r24
 118:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 11a:	36 9a       	sbi	0x06, 6	; 6
 11c:	80 ea       	ldi	r24, 0xA0	; 160
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <getdata+0x10>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 124:	85 b1       	in	r24, 0x05	; 5
  }
 126:	08 95       	ret

00000128 <main>:
#include<util/delay.h>
#include "uart.h"
#include"adc.h"

void main()
{
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
DDRB=0b11111111;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 bb       	out	0x17, r24	; 23
PORTB=0b11111111;
 138:	88 bb       	out	0x18, r24	; 24
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0;
 13a:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
 13c:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	80 bd       	out	0x20, r24	; 32

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 14a:	86 b9       	out	0x06, r24	; 6
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	20 e9       	ldi	r18, 0x90	; 144
 152:	31 e0       	ldi	r19, 0x01	; 1
 154:	f9 01       	movw	r30, r18
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <main+0x2c>
unsigned char digital;
uart_init();
adc_init();
_delay_ms(1000);
uart_string("AT+CWMODE=3\r\n");
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	c6 df       	rcall	.-116    	; 0xf0 <uart_string>
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	95 e7       	ldi	r25, 0x75	; 117
 168:	20 e9       	ldi	r18, 0x90	; 144
 16a:	31 e0       	ldi	r19, 0x01	; 1
 16c:	f9 01       	movw	r30, r18
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	d9 f7       	brne	.-10     	; 0x16c <main+0x44>
_delay_ms(3000);


uart_string("AT+CWJAP=\"hotspot\",\"password\"\r\n");
 176:	8e e6       	ldi	r24, 0x6E	; 110
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ba df       	rcall	.-140    	; 0xf0 <uart_string>
 17c:	80 e5       	ldi	r24, 0x50	; 80
 17e:	93 ec       	ldi	r25, 0xC3	; 195
 180:	20 e9       	ldi	r18, 0x90	; 144
 182:	31 e0       	ldi	r19, 0x01	; 1
 184:	f9 01       	movw	r30, r18
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0x5c>
 18e:	80 e5       	ldi	r24, 0x50	; 80
 190:	93 ec       	ldi	r25, 0xC3	; 195
 192:	20 e9       	ldi	r18, 0x90	; 144
 194:	31 e0       	ldi	r19, 0x01	; 1
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <main+0x6e>
 1a0:	80 e5       	ldi	r24, 0x50	; 80
 1a2:	93 ec       	ldi	r25, 0xC3	; 195
 1a4:	20 e9       	ldi	r18, 0x90	; 144
 1a6:	31 e0       	ldi	r19, 0x01	; 1
 1a8:	f9 01       	movw	r30, r18
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <main+0x80>
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 1b2:	00 e6       	ldi	r16, 0x60	; 96
 1b4:	80 ea       	ldi	r24, 0xA0	; 160
 1b6:	e8 2e       	mov	r14, r24
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	f8 2e       	mov	r15, r24
 1bc:	c0 e9       	ldi	r28, 0x90	; 144
 1be:	d1 e0       	ldi	r29, 0x01	; 1
 1c0:	07 b9       	out	0x07, r16	; 7
    ADMUX|=chno;					//select the ADC channel
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 1c6:	36 9a       	sbi	0x06, 6	; 6
 1c8:	c7 01       	movw	r24, r14
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xa2>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 1ce:	15 b1       	in	r17, 0x05	; 5
_delay_ms(5000);
while(1)
{
digital=getdata(0);

uart_string("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 1d0:	8e e8       	ldi	r24, 0x8E	; 142
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	8d df       	rcall	.-230    	; 0xf0 <uart_string>
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	95 e7       	ldi	r25, 0x75	; 117
 1da:	fe 01       	movw	r30, r28
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	d9 f7       	brne	.-10     	; 0x1da <main+0xb2>
_delay_ms(3000);


uart_string("AT+CIPSEND=51\r\n");
 1e4:	8a eb       	ldi	r24, 0xBA	; 186
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	83 df       	rcall	.-250    	; 0xf0 <uart_string>
 1ea:	88 ee       	ldi	r24, 0xE8	; 232
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	fe 01       	movw	r30, r28
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <main+0xc6>
_delay_ms(100);

uart_string("GET /update?api_key=HNI8SQCY8TU970TO&field1=");
 1f8:	8a ec       	ldi	r24, 0xCA	; 202
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	79 df       	rcall	.-270    	; 0xf0 <uart_string>
uart_num(digital);
 1fe:	81 2f       	mov	r24, r17
 200:	3b df       	rcall	.-394    	; 0x78 <uart_num>
uart_string("\r\n");
 202:	87 ef       	ldi	r24, 0xF7	; 247
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	74 df       	rcall	.-280    	; 0xf0 <uart_string>
 208:	88 ee       	ldi	r24, 0xE8	; 232
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	fe 01       	movw	r30, r28
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 212:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 214:	d9 f7       	brne	.-10     	; 0x20c <main+0xe4>
_delay_ms(100);


uart_string("AT+CIPCLOSE\r\n");
 216:	8a ef       	ldi	r24, 0xFA	; 250
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	6a df       	rcall	.-300    	; 0xf0 <uart_string>
 21c:	80 e6       	ldi	r24, 0x60	; 96
 21e:	9a ee       	ldi	r25, 0xEA	; 234
 220:	fe 01       	movw	r30, r28
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 226:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 228:	d9 f7       	brne	.-10     	; 0x220 <main+0xf8>
 22a:	ca cf       	rjmp	.-108    	; 0x1c0 <main+0x98>

0000022c <__udivmodqi4>:
 22c:	99 1b       	sub	r25, r25
 22e:	79 e0       	ldi	r23, 0x09	; 9
 230:	04 c0       	rjmp	.+8      	; 0x23a <__udivmodqi4_ep>

00000232 <__udivmodqi4_loop>:
 232:	99 1f       	adc	r25, r25
 234:	96 17       	cp	r25, r22
 236:	08 f0       	brcs	.+2      	; 0x23a <__udivmodqi4_ep>
 238:	96 1b       	sub	r25, r22

0000023a <__udivmodqi4_ep>:
 23a:	88 1f       	adc	r24, r24
 23c:	7a 95       	dec	r23
 23e:	c9 f7       	brne	.-14     	; 0x232 <__udivmodqi4_loop>
 240:	80 95       	com	r24
 242:	08 95       	ret

00000244 <__divmodhi4>:
 244:	97 fb       	bst	r25, 7
 246:	09 2e       	mov	r0, r25
 248:	07 26       	eor	r0, r23
 24a:	0a d0       	rcall	.+20     	; 0x260 <__divmodhi4_neg1>
 24c:	77 fd       	sbrc	r23, 7
 24e:	04 d0       	rcall	.+8      	; 0x258 <__divmodhi4_neg2>
 250:	0c d0       	rcall	.+24     	; 0x26a <__udivmodhi4>
 252:	06 d0       	rcall	.+12     	; 0x260 <__divmodhi4_neg1>
 254:	00 20       	and	r0, r0
 256:	1a f4       	brpl	.+6      	; 0x25e <__divmodhi4_exit>

00000258 <__divmodhi4_neg2>:
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255

0000025e <__divmodhi4_exit>:
 25e:	08 95       	ret

00000260 <__divmodhi4_neg1>:
 260:	f6 f7       	brtc	.-4      	; 0x25e <__divmodhi4_exit>
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__udivmodhi4>:
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	51 e1       	ldi	r21, 0x11	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__udivmodhi4_ep>

00000272 <__udivmodhi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	a6 17       	cp	r26, r22
 278:	b7 07       	cpc	r27, r23
 27a:	10 f0       	brcs	.+4      	; 0x280 <__udivmodhi4_ep>
 27c:	a6 1b       	sub	r26, r22
 27e:	b7 0b       	sbc	r27, r23

00000280 <__udivmodhi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	5a 95       	dec	r21
 286:	a9 f7       	brne	.-22     	; 0x272 <__udivmodhi4_loop>
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
