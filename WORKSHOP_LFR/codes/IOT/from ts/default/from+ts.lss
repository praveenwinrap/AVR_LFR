
from+ts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000fe  008000fe  00000398  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fe  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041f  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000104  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b1  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e6       	ldi	r30, 0x66	; 102
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 3f       	cpi	r26, 0xFE	; 254
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	ae ef       	ldi	r26, 0xFE	; 254
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 31       	cpi	r26, 0x13	; 19
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	58 d0       	rcall	.+176    	; 0x10a <main>
  5a:	03 c1       	rjmp	.+518    	; 0x262 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_init>:
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0;
  5e:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
  60:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
  66:	88 e1       	ldi	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  6a:	86 e8       	ldi	r24, 0x86	; 134
  6c:	80 bd       	out	0x20, r24	; 32
	

	//uart_delay(100);
}
  6e:	08 95       	ret

00000070 <uart_char>:

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  70:	5d 9b       	sbis	0x0b, 5	; 11
  72:	fe cf       	rjmp	.-4      	; 0x70 <uart_char>
	UDR=t;
  74:	8c b9       	out	0x0c, r24	; 12
}
  76:	08 95       	ret

00000078 <uart_num>:
	uart_delay(100);
}

 
void uart_num(unsigned char num)
{
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	48 2f       	mov	r20, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  7e:	64 e6       	ldi	r22, 0x64	; 100
  80:	bd d0       	rcall	.+378    	; 0x1fc <__udivmodqi4>
  82:	e8 2f       	mov	r30, r24
	T=(num - (H*100))/10;
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	8c e9       	ldi	r24, 0x9C	; 156
  8a:	9f ef       	ldi	r25, 0xFF	; 255
  8c:	28 9f       	mul	r18, r24
  8e:	e0 01       	movw	r28, r0
  90:	29 9f       	mul	r18, r25
  92:	d0 0d       	add	r29, r0
  94:	38 9f       	mul	r19, r24
  96:	d0 0d       	add	r29, r0
  98:	11 24       	eor	r1, r1
  9a:	ce 01       	movw	r24, r28
  9c:	84 0f       	add	r24, r20
  9e:	91 1d       	adc	r25, r1
  a0:	6a e0       	ldi	r22, 0x0A	; 10
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	b7 d0       	rcall	.+366    	; 0x214 <__divmodhi4>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <uart_num+0x2e>
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
  aa:	e0 5d       	subi	r30, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  ac:	ec b9       	out	0x0c, r30	; 12
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <uart_num+0x36>
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
  b2:	60 5d       	subi	r22, 0xD0	; 208
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  b4:	6c b9       	out	0x0c, r22	; 12
  b6:	60 53       	subi	r22, 0x30	; 48
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <uart_num+0x40>
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
  bc:	40 5d       	subi	r20, 0xD0	; 208
  be:	4c 0f       	add	r20, r28
  c0:	86 ef       	ldi	r24, 0xF6	; 246
  c2:	9f ef       	ldi	r25, 0xFF	; 255
  c4:	68 9f       	mul	r22, r24
  c6:	80 2d       	mov	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	84 0f       	add	r24, r20
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
	UDR=t;
  cc:	8c b9       	out	0x0c, r24	; 12
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <uart_read>:
 
unsigned char uart_read()
{
		while((UCSRA & 0b10000000)==0);
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <uart_read>
	return UDR;
  d8:	8c b1       	in	r24, 0x0c	; 12
	
}
  da:	08 95       	ret

000000dc <uart_delay>:
 
void uart_delay(unsigned int delaytime)
{
  dc:	88 ee       	ldi	r24, 0xE8	; 232
  de:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	2c e2       	ldi	r18, 0x2C	; 44
  e2:	31 e0       	ldi	r19, 0x01	; 1
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <uart_delay+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <uart_delay+0x8>
	_delay_ms(100);
}
  ee:	08 95       	ret

000000f0 <uart_string>:
	UDR=t;
}

 
void uart_string(char a[])
{
  f0:	fc 01       	movw	r30, r24
  f2:	04 c0       	rjmp	.+8      	; 0xfc <uart_string+0xc>
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  f4:	5d 9b       	sbis	0x0b, 5	; 11
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <uart_string+0x4>
	UDR=t;
  f8:	8c b9       	out	0x0c, r24	; 12
  fa:	31 96       	adiw	r30, 0x01	; 1
 
void uart_string(char a[])
{
	
	int i;
	for(i=0;a[i]!='\0';i++)
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	c9 f7       	brne	.-14     	; 0xf4 <uart_string+0x4>
	uart_char(a[i]);
	uart_delay(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ea df       	rcall	.-44     	; 0xdc <uart_delay>
}
 108:	08 95       	ret

0000010a <main>:

char LK,as[20];


void main()
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
char c[20];
int i;
DDRB=0xff;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	87 bb       	out	0x17, r24	; 23
PORTB=0xff;
 112:	88 bb       	out	0x18, r24	; 24
#ifndef _UART_H_
#define _UART_H_

void uart_init()
{
	UCSRA=0;
 114:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
 116:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
 120:	86 e8       	ldi	r24, 0x86	; 134
 122:	80 bd       	out	0x20, r24	; 32
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	97 e2       	ldi	r25, 0x27	; 39
 128:	2c e2       	ldi	r18, 0x2C	; 44
 12a:	31 e0       	ldi	r19, 0x01	; 1
 12c:	f9 01       	movw	r30, r18
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 134:	d9 f7       	brne	.-10     	; 0x12c <main+0x22>
uart_init();

_delay_ms(1000);
uart_string("AT+CWMODE=3\r\n");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	da df       	rcall	.-76     	; 0xf0 <uart_string>
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	95 e7       	ldi	r25, 0x75	; 117
 140:	2c e2       	ldi	r18, 0x2C	; 44
 142:	31 e0       	ldi	r19, 0x01	; 1
 144:	f9 01       	movw	r30, r18
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d9 f7       	brne	.-10     	; 0x144 <main+0x3a>
_delay_ms(3000);


uart_string("AT+CWJAP=\"nex\",\"asdfghjkl\"\r\n");
 14e:	8e e6       	ldi	r24, 0x6E	; 110
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ce df       	rcall	.-100    	; 0xf0 <uart_string>
 154:	80 e5       	ldi	r24, 0x50	; 80
 156:	93 ec       	ldi	r25, 0xC3	; 195
 158:	2c e2       	ldi	r18, 0x2C	; 44
 15a:	31 e0       	ldi	r19, 0x01	; 1
 15c:	f9 01       	movw	r30, r18
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 162:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 164:	d9 f7       	brne	.-10     	; 0x15c <main+0x52>
 166:	80 e5       	ldi	r24, 0x50	; 80
 168:	93 ec       	ldi	r25, 0xC3	; 195
 16a:	2c e2       	ldi	r18, 0x2C	; 44
 16c:	31 e0       	ldi	r19, 0x01	; 1
 16e:	f9 01       	movw	r30, r18
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <main+0x64>
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	93 ec       	ldi	r25, 0xC3	; 195
 17c:	2c e2       	ldi	r18, 0x2C	; 44
 17e:	31 e0       	ldi	r19, 0x01	; 1
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <main+0x76>
 18a:	cc e2       	ldi	r28, 0x2C	; 44
 18c:	d1 e0       	ldi	r29, 0x01	; 1


while(1)
{

uart_string("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 18e:	8b e8       	ldi	r24, 0x8B	; 139
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ae df       	rcall	.-164    	; 0xf0 <uart_string>
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	95 e7       	ldi	r25, 0x75	; 117
 198:	fe 01       	movw	r30, r28
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0x8e>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <main+0x9c>
_delay_ms(3000);
_delay_ms(2000);

uart_string("AT+CIPSEND=42\r\n");
 1b0:	87 eb       	ldi	r24, 0xB7	; 183
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9d df       	rcall	.-198    	; 0xf0 <uart_string>
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	97 e2       	ldi	r25, 0x27	; 39
 1ba:	fe 01       	movw	r30, r28
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <main+0xb0>
_delay_ms(1000);

uart_string("GET /channels/410218/fields/1/last.txt\r\n");
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	93 df       	rcall	.-218    	; 0xf0 <uart_string>
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	97 e2       	ldi	r25, 0x27	; 39
 1ce:	fe 01       	movw	r30, r28
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <main+0xc4>

_delay_ms(1000);



uart_string("AT+CIPCLOSE\r\n");
 1d8:	80 ef       	ldi	r24, 0xF0	; 240
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	89 df       	rcall	.-238    	; 0xf0 <uart_string>
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	95 e7       	ldi	r25, 0x75	; 117
 1e2:	fe 01       	movw	r30, r28
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <main+0xd8>
 1ec:	80 e1       	ldi	r24, 0x10	; 16
 1ee:	97 e2       	ldi	r25, 0x27	; 39
 1f0:	fe 01       	movw	r30, r28
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f8:	d9 f7       	brne	.-10     	; 0x1f0 <main+0xe6>
 1fa:	c9 cf       	rjmp	.-110    	; 0x18e <main+0x84>

000001fc <__udivmodqi4>:
 1fc:	99 1b       	sub	r25, r25
 1fe:	79 e0       	ldi	r23, 0x09	; 9
 200:	04 c0       	rjmp	.+8      	; 0x20a <__udivmodqi4_ep>

00000202 <__udivmodqi4_loop>:
 202:	99 1f       	adc	r25, r25
 204:	96 17       	cp	r25, r22
 206:	08 f0       	brcs	.+2      	; 0x20a <__udivmodqi4_ep>
 208:	96 1b       	sub	r25, r22

0000020a <__udivmodqi4_ep>:
 20a:	88 1f       	adc	r24, r24
 20c:	7a 95       	dec	r23
 20e:	c9 f7       	brne	.-14     	; 0x202 <__udivmodqi4_loop>
 210:	80 95       	com	r24
 212:	08 95       	ret

00000214 <__divmodhi4>:
 214:	97 fb       	bst	r25, 7
 216:	09 2e       	mov	r0, r25
 218:	07 26       	eor	r0, r23
 21a:	0a d0       	rcall	.+20     	; 0x230 <__divmodhi4_neg1>
 21c:	77 fd       	sbrc	r23, 7
 21e:	04 d0       	rcall	.+8      	; 0x228 <__divmodhi4_neg2>
 220:	0c d0       	rcall	.+24     	; 0x23a <__udivmodhi4>
 222:	06 d0       	rcall	.+12     	; 0x230 <__divmodhi4_neg1>
 224:	00 20       	and	r0, r0
 226:	1a f4       	brpl	.+6      	; 0x22e <__divmodhi4_exit>

00000228 <__divmodhi4_neg2>:
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255

0000022e <__divmodhi4_exit>:
 22e:	08 95       	ret

00000230 <__divmodhi4_neg1>:
 230:	f6 f7       	brtc	.-4      	; 0x22e <__divmodhi4_exit>
 232:	90 95       	com	r25
 234:	81 95       	neg	r24
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	08 95       	ret

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
